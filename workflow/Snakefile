## Check minimum Snakemake version

from snakemake.utils import min_version

min_version("6.0")

## Import required libraries

import os

## Configuration check

if len(config) == 0:
    
    sys.exit(
        f"Please specify the path to the input directory with --config INPUT='path/to/input'."
    )


## Config

INPUT_DIR = os.path.normpath(config["INPUT_DIR"])
BIN_SIZE = config.get("BIN_SIZE", 10000)


## Parse Input directory

DATA_TYPE = os.path.basename(INPUT_DIR) # Assumes user named input directory after data type (DNA, RNA, WGBS) unless a config file is provided. 
if DATA_TYPE=="DNA":
    ALIGNER="bwa"
elif DATA_TYPE=="WGBS":
    ALIGNER="bismark"
else:
    sys.exit(
        f"ERROR: Unknown data type. Name the input directory after the data type: 'DNA' or 'WGBS'."
        )

SAMPLES = os.listdir(f"{INPUT_DIR}/polyploids") 
PROGENITORS = os.listdir(f"{INPUT_DIR}/progenitors") 

random_sample = SAMPLES[0] # We assume data is either paired or unpaired.

random_sample_dir = os.path.join(INPUT_DIR, "polyploids", random_sample)
# Ensure it's a directory before listing files
if os.path.isdir(random_sample_dir):
    num_files = len(os.listdir(random_sample_dir))
else:
    raise ValueError(f"{random_sample_dir} is not a valid directory!")

if num_files > 2:
    raise ValueError(f"Too many files in {random_sample_dir} ({num_files} found). Expected at most 2.")

IS_PAIRED = num_files == 2  

eagle_config_values = {
    "INPUT_DIR": f"{INPUT_DIR}"
}

## Import modules 
module EAGLE_RC:
    snakefile:
        github("kenji-yt/snake-EAGLE-RC", path="workflow/Snakefile", tag="v0.1.1-alpha")
    config: eagle_config_values

use rule * from EAGLE_RC as eagle_rc_*


genespace_config_values = {
    "INPUT_DIR": f"{INPUT_DIR}"+"/progenitors"
}


module GENESPACE:
    snakefile:
        github("kenji-yt/snake-GENESPACE", path="workflow/Snakefile", tag="v0.1.1-alpha")
    config: genespace_config_values

use rule * from GENESPACE as genespace_*

#Non-rule Python statements inside the module are also evaluated in that separate namespace. They are available in the module-defining workflow under the name of the module (e.g. here other_workflow.myfunction()


### Rules ###

include: "rules/bin_gc_map.smk"

rule all:
    input:
        "results/reproducibility_reports/HEAL_reproducibility_report.txt"

rule make_reproducibility_report:
    input:
        input_dir=f"{INPUT_DIR}",
        multi_qc="results/MultiQC/multiqc_report.html",
        healr_output="results/healr/stats"
    output:
        "results/reproducibility_report.txt"
    threads: workflow.cores
    shell:
        "bash {workflow.basedir}/scripts/make_reproducibility_report.sh {input.input_dir} {threads}"
