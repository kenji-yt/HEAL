## Check minimum Snakemake version

from snakemake.utils import min_version

min_version("6.0")

## Import required libraries

import os
import glob
import re
import requests

## Configuration check

if len(config) == 0:
    
    sys.exit(
        f"Please specify the path to the input directory with --config INPUT_DIR='path/to/input_directory'."
    )


## Config

INPUT_DIR = os.path.normpath(config["INPUT_DIR"])
BIN_SIZE = config.get("BIN_SIZE", 10000)
FILTER = config.get("FILTER", True)
if not (FILTER is True or FILTER is False or (isinstance(FILTER, str) and len(FILTER) == 1)):
    raise ValueError("Error: FILTER must be either True, False or flags to pass to fastp.")
if isinstance(FILTER, str):
    FILTER_PARAMS = FILTER
    FILTER = True
elif FILTER is True:
    FILTER_PARAMS = "Default"
elif FILTER is False:
    FILTER_PARAMS = "No filtering"
SOFT_CLIP = config.get("SOFT_CLIP", False)
if not isinstance(SOFT_CLIP, bool):
    raise ValueError("Error: SOFT_CLIP must be either True or False.")
SAVE_HEALR_LISTS = config.get("SAVE_HEALR_LISTS", True)
if not isinstance(SOFT_CLIP, bool):
    raise ValueError("Error: SAVE_HEALR_LISTS must be either True or False.")


## Parse Input directory

DATA_TYPE = os.path.basename(INPUT_DIR) # Assumes user named input directory after data type (DNA, RNA, WGBS) unless a config file is provided. 
if DATA_TYPE not in {"DNA", "RNA", "WGBS"}:
    error_msg=f"ERROR: Unknown data type. Name the input directory after the data type: 'DNA', 'RNA' or 'WGBS'."
    raise ValueError(error_msg)
    

SAMPLES = os.listdir(f"{INPUT_DIR}/polyploids") 
PROGENITORS = os.listdir(f"{INPUT_DIR}/progenitors") 

random_sample = SAMPLES[0] # We assume data is either entirely paired or unpaired.

random_sample_dir = os.path.join(INPUT_DIR, "polyploids", random_sample)
# Ensure it's a directory before listing files
if os.path.isdir(random_sample_dir):
    num_files = len(os.listdir(random_sample_dir))
else:
    raise ValueError(f"{random_sample_dir} is not a valid directory!")

if num_files > 2:
    raise ValueError(f"Too many files in {random_sample_dir} ({num_files} found). Expected at most 2.")

if num_files == 2:
    IS_PAIRED = "TRUE"
else:
    IS_PAIRED = "FALSE"

if SAVE_HEALR_LISTS == True:
    save_healr_lists = "TRUE"
else:
    save_healr_lists = "FALSE"

# get all read files
accepted_read_patterns = [
        f"{INPUT_DIR}/polyploids/**/*.fastq",
        f"{INPUT_DIR}/polyploids/**/*.fasta",
        f"{INPUT_DIR}/polyploids/**/*.fna",
        f"{INPUT_DIR}/polyploids/**/*.fq",
        f"{INPUT_DIR}/polyploids/**/*.fa",
        f"{INPUT_DIR}/polyploids/**/*.fastq.gz",
        f"{INPUT_DIR}/polyploids/**/*.fasta.gz",
        f"{INPUT_DIR}/polyploids/**/*.fna.gz",
        f"{INPUT_DIR}/polyploids/**/*.fq.gz",
        f"{INPUT_DIR}/polyploids/**/*.fa.gz",
    ]
all_read_paths = [] 
for pattern in accepted_read_patterns:
        for file in glob.glob(pattern, recursive=True):
            basename = os.path.basename(file)  
            parent_dir = os.path.basename(os.path.dirname(file))  
            all_read_paths.append(os.path.join(parent_dir, basename))


### Make wildcard constraints ###
import re
sample_regex = "|".join(re.escape(sample) for sample in SAMPLES)
progenitor_regex = "|".join(re.escape(progenitor) for progenitor in PROGENITORS)

wildcard_constraints: # limit the value of these wildcards to directory names 
    sample = sample_regex,
    progenitor = progenitor_regex



### Rules ###
include: "rules/bin_gc_map.smk"
include: "rules/healr_analysis.smk"

rule all:
    input:
       "results/HEAL_reproducibility_report.txt"

rule make_reproducibility_report:
    input:
        input_dir=f"{INPUT_DIR}",
        multi_qc="results/MultiQC/multiqc_report.html",
        healr_output="results/healr/stats",
        snake_genespace_report="results/snake_GENESPACE_reproducibility_report.txt",
        snake_eagle_rc_report="results/snake_EAGLE_RC_reproducibility_report.txt"
    output:
        "results/HEAL_reproducibility_report.txt"
    params:
        cores=workflow.cores,
        bin_size=BIN_SIZE,
        filtering=FILTER_PARAMS,
        soft_clip=SOFT_CLIP,
    threads:1
    shell:
        """
        bash {workflow.basedir}/scripts/make_HEAL_reproducibility_report.sh {input.input_dir} \
        {params.cores} \
        {params.bin_size} \
        {params.filtering} \
        {params.soft_clip}
        """



### Import modules ###

## EAGLE-RC 
# get the scripts
os.makedirs("results/eagle_rc/scripts", exist_ok=True)
eagle_rc_url = 'https://raw.githubusercontent.com/kenji-yt/snake-EAGLE-RC/main/workflow/scripts/make_EAGLE_reproducibility_report.sh'
eagle_rc_output_path = 'results/eagle_rc/scripts/make_EAGLE_reproducibility_report.sh'

response_eagle_rc = requests.get(eagle_rc_url)

if response_eagle_rc.status_code == 200:
    with open(eagle_rc_output_path, 'wb') as f:
        f.write(response_eagle_rc.content)
else:
    raise ValueError(f"Failed to download eagle-rc script. Status code: {response_eagle_rc.status_code}")

eagle_config_values = {
    "INPUT_DIR": f"{INPUT_DIR}",
    "FILTER": FILTER,
    "SOFT_CLIP": SOFT_CLIP,
    "SCRIPTS_DIR": "results/eagle_rc/scripts"
}

module EAGLE_RC:
    snakefile: # CHANGE REPRODUCIBILITY REPORT IF CHANGING THE TAG
        github("kenji-yt/snake-EAGLE-RC", path="workflow/Snakefile", branch="main") # ,tag="v0.1.1-alpha") Put back tag after 
    config: eagle_config_values

use rule * from EAGLE_RC as eagle_rc_*


## GENESPACE
# get the scripts
os.makedirs("results/genespace/scripts", exist_ok=True)

genespace_parse_url = 'https://raw.githubusercontent.com/kenji-yt/snake-GENESPACE/main/workflow/scripts/parse_genespace_input.sh'
genespace_parse_output_path = 'results/genespace/scripts/parse_genespace_input.sh'
response_parse_genespace = requests.get(genespace_parse_url)
if response_parse_genespace.status_code == 200:
    with open(genespace_parse_output_path, 'wb') as f:
        f.write(response_parse_genespace.content)
else:
    raise ValueError(f"Failed to download genespace parsing script. Status code: {response_parse_genespace.status_code}")

genespace_reprod_url = 'https://raw.githubusercontent.com/kenji-yt/snake-GENESPACE/main/workflow/scripts/make_GENESPACE_reproducibility_report.sh'
genespace_reprod_output_path = 'results/genespace/scripts/make_GENESPACE_reproducibility_report.sh'
response_reprod_genespace = requests.get(genespace_reprod_url)
if response_reprod_genespace.status_code == 200:
    with open(genespace_reprod_output_path, 'wb') as f:
        f.write(response_reprod_genespace.content)
else:
    raise ValueError(f"Failed to download genespace reproducility report script. Status code: {response_reprod_genespace.status_code}")

genespace_config_values = {
    "INPUT_DIR": f"{INPUT_DIR}"+"/progenitors",
    "SCRIPTS_DIR": "results/genespace/scripts"
}

module GENESPACE:
    snakefile: # CHANGE REPRODUCIBILITY REPORT IF CHANGING THE TAG
        github("kenji-yt/snake-GENESPACE", path="workflow/Snakefile", branch="main")#, tag="v0.1.1-alpha")
    config: genespace_config_values

use rule * from GENESPACE as genespace_* 
